1. Qinzhou Song qinzhounick@wustl.edu
Sicheng Yang sicheng@wustl.edu

2.
let x: f64 = 0.0;
println!("cos: {}", f64::cos(f64::sin(x)));

[sicheng@iht32-1508.sif rustclosures]$ cargo run
   Compiling rustclosures v0.1.0 (/home/warehouse/sicheng/cse542/rustclosures)
    Finished dev [unoptimized + debuginfo] target(s) in 0.99s
     Running `target/debug/rustclosures`
cos: 1

3.
let cos_sin = |x| {
        println!("cos: {}", f64::cos(f64::sin(x)));
};

4.

struct S{
    x: f64,
    y: fn(f64) -> f64,
    z: fn(f64) -> f64
}

main:

let s = S{x: 0.0, y: f64::cos, z: f64::sin};
let s_closure = |s: S| {
    println!("cos: {}", (s.y)((s.z)(s.x)));
};

s_closure(s);

5.
struct S<T>{
    x: T,
    y: fn(T) -> T,
    z: fn(T) -> T
}

let s = S::<f64>{x: 0.0, y: f64::cos, z: f64::sin};
let s_closure = |s: S<f64>| {
    println!("cos: {}", (s.y)((s.z)(s.x)));
};

s_closure(s);

6.
let mut string = "Hello".to_string();
let str_closure = |mut s: String| -> String {
    s = s + ", world!";
    s
};

println!("orinigal string: {}", string);
println!("string closure: {}", str_closure(string));

[sicheng@iht32-1508.sif rustclosures]$ cargo run
   Compiling rustclosures v0.1.0 (/home/warehouse/sicheng/cse542/rustclosures)
warning: variable does not need to be mutable
  --> src/main.rs:22:9
   |
22 |     let mut string = "Hello".to_string();
   |         ----^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: `rustclosures` (bin "rustclosures") generated 1 warning (run `cargo fix --bin "rustclosures"` to apply 1 suggestion)
    Finished dev [unoptimized + debuginfo] target(s) in 1.16s
     Running `target/debug/rustclosures`
cos: 1
cos: 1
orinigal string: Hello
string closure: Hello, world!