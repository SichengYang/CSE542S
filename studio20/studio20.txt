1. Qinzhou Song qinzhounick@wustl.edu
Sicheng Yang sicheng@wustl.edu

2.
code:
let vec = env::args().collect::<Vec<String>>();
if vec.len() != 1{
    println!("usage: ./{}", vec[0]);
}

output:
[sicheng@shell rustmacros]$ cargo run
   Compiling rustmacros v0.1.0 (/home/warehouse/sicheng/cse542/CSE542S/studio20/rustmacros)
    Finished dev [unoptimized + debuginfo] target(s) in 9.88s
     Running `target/debug/rustmacros`
[sicheng@shell rustmacros]$ cargo run 1
    Finished dev [unoptimized + debuginfo] target(s) in 0.63s
     Running `target/debug/rustmacros 1`
usage: ./target/debug/rustmacros

3.
macro_rules! check_cmd_line {
    () => {
        let vec = env::args().collect::<Vec<String>>();
        if vec.len() != 1{
            println!("usage: ./{}", vec[0]);
        }
    }
}

fn main() {
    check_cmd_line!();
}

4.
pub static ATO: AtomicBool = AtomicBool::new(true); 

macro_rules! check_cmd_line {
    () => {
        let vec = env::args().collect::<Vec<String>>();
        if vec.len() != 1 && ATO.load(SeqCst){
            println!("usage: ./{}", vec[0]);
        }
    }
}

fn main() {
    check_cmd_line!();
}

5.
[sicheng@shell rustmacros]$ cargo run 1
   Compiling rustmacros v0.1.0 (/home/warehouse/sicheng/cse542/CSE542S/studio20/rustmacros)
    Finished dev [unoptimized + debuginfo] target(s) in 9.35s
     Running `target/debug/rustmacros 1`
usage: ./target/debug/rustmacros
usage: ./target/debug/rustmacros

6.
pub static ATO: AtomicBool = AtomicBool::new(true); 

macro_rules! check_cmd_line {
    () => {
        let vec = env::args().collect::<Vec<String>>();
        if vec.len() != 1 && ATO.load(SeqCst){
            println!("usage: ./{}", vec[0]);
        }
    };

    (true) => {
        ATO.store(true, SeqCst);
    };

    (false) => {
        ATO.store(false, SeqCst);
    };
}

fn main() {
    check_cmd_line!();
    check_cmd_line!(false);
    check_cmd_line!();
}